// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190530095446_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.EntityModels.Auth.Roles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Models.EntityModels.Auth.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.EntityModels.Auth.UserRoles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.FileMapping", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cell");

                    b.Property<int>("FileTypeID");

                    b.Property<string>("SheetName");

                    b.Property<string>("VariableName");

                    b.Property<int>("VariableTypeID");

                    b.HasKey("ID");

                    b.HasIndex("FileTypeID");

                    b.HasIndex("VariableTypeID");

                    b.ToTable("FileMapping");
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.ReadFiles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName");

                    b.Property<int>("ReadFileStatusID");

                    b.Property<int>("UploadFileTypeID");

                    b.HasKey("ID");

                    b.HasIndex("ReadFileStatusID");

                    b.HasIndex("UploadFileTypeID");

                    b.ToTable("ReadFiles");
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.ReadFileStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("ID");

                    b.ToTable("ReadFileStatuses");
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.UnplanedExcelData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ReadFileID");

                    b.Property<decimal>("ValueDecimal");

                    b.Property<int>("ValueInt");

                    b.Property<string>("ValueNvarchar");

                    b.Property<string>("VariableName");

                    b.HasKey("ID");

                    b.HasIndex("ReadFileID");

                    b.ToTable("UnplanedExcelDatas");
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.UploadFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsImported");

                    b.Property<DateTime>("UploadDate");

                    b.Property<byte[]>("UploadFileData");

                    b.Property<int>("UploadFileTypeID");

                    b.HasKey("ID");

                    b.HasIndex("UploadFileTypeID");

                    b.ToTable("UploadFiles");
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.UploadFileType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("FilesPath");

                    b.HasKey("ID");

                    b.ToTable("UploadFileType");
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.VariableType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("ID");

                    b.ToTable("VariableTypes");
                });

            modelBuilder.Entity("Models.EntityModels.HR.DutyStation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DutyStationAddress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DutyStationName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("DutyStations");
                });

            modelBuilder.Entity("Models.EntityModels.HR.EmployeeJobData", b =>
                {
                    b.Property<int>("EmployeePersonID");

                    b.Property<DateTime>("ChangeDate");

                    b.Property<bool>("ConsiderOveruse");

                    b.Property<int>("DutyStationID");

                    b.Property<int>("EmployeePossitionID");

                    b.Property<DateTime>("HireDate");

                    b.Property<bool>("IsTemporaryEmployee");

                    b.Property<int>("ManagerAgreementTypeID");

                    b.Property<int>("ManagerID");

                    b.Property<int>("OrganizationEntityID");

                    b.Property<DateTime>("ProbationExpirationDate");

                    b.Property<DateTime>("TerminationDate");

                    b.HasKey("EmployeePersonID");

                    b.HasIndex("DutyStationID");

                    b.HasIndex("EmployeePossitionID");

                    b.HasIndex("ManagerAgreementTypeID");

                    b.HasIndex("OrganizationEntityID");

                    b.ToTable("EmployeeJobDatas");
                });

            modelBuilder.Entity("Models.EntityModels.HR.EmployeeMobileNumber", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Number");

                    b.Property<int>("NumberTypeID");

                    b.HasKey("ID");

                    b.HasIndex("NumberTypeID");

                    b.ToTable("EmployeeMobileNumbers");
                });

            modelBuilder.Entity("Models.EntityModels.HR.EmployeePerson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("BirthPlace");

                    b.Property<string>("City");

                    b.Property<string>("Email");

                    b.Property<string>("EmployeMobileID");

                    b.Property<byte[]>("EmployeeImage");

                    b.Property<int?>("EmployeeMobileNumberID");

                    b.Property<string>("FirstName");

                    b.Property<int>("GenderID");

                    b.Property<string>("IPPhoneNumber");

                    b.Property<string>("LastName");

                    b.Property<string>("PIN");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeMobileNumberID");

                    b.HasIndex("GenderID");

                    b.ToTable("EmployeePersons");
                });

            modelBuilder.Entity("Models.EntityModels.HR.EmployeePossition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Description_en")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("EmployeePossitions");
                });

            modelBuilder.Entity("Models.EntityModels.HR.ManagerAgreementType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Description_en")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("ManagerAgreementTypes");
                });

            modelBuilder.Entity("Models.EntityModels.HR.MobileNumberType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Description_en");

                    b.HasKey("ID");

                    b.ToTable("MobileNumberTypes");
                });

            modelBuilder.Entity("Models.EntityModels.HR.OrganizationEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Description_en")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("OrganizationEntities");
                });

            modelBuilder.Entity("Models.EntityModels.Shared.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Description");

                    b.HasKey("ID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Models.EntityModels.Auth.UserRoles", b =>
                {
                    b.HasOne("Models.EntityModels.Auth.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.EntityModels.Auth.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.FileMapping", b =>
                {
                    b.HasOne("Models.EntityModels.ExcelLoan.UploadFileType", "UploadFileType")
                        .WithMany()
                        .HasForeignKey("FileTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.EntityModels.ExcelLoan.VariableType", "VariableType")
                        .WithMany()
                        .HasForeignKey("VariableTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.ReadFiles", b =>
                {
                    b.HasOne("Models.EntityModels.ExcelLoan.ReadFileStatus", "ReadFileStatus")
                        .WithMany()
                        .HasForeignKey("ReadFileStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.EntityModels.ExcelLoan.UploadFileType", "UploadFileType")
                        .WithMany()
                        .HasForeignKey("UploadFileTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.UnplanedExcelData", b =>
                {
                    b.HasOne("Models.EntityModels.ExcelLoan.ReadFiles", "ReadFiles")
                        .WithMany()
                        .HasForeignKey("ReadFileID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.EntityModels.ExcelLoan.UploadFile", b =>
                {
                    b.HasOne("Models.EntityModels.ExcelLoan.UploadFileType", "UploadFileType")
                        .WithMany()
                        .HasForeignKey("UploadFileTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.EntityModels.HR.EmployeeJobData", b =>
                {
                    b.HasOne("Models.EntityModels.HR.DutyStation", "DutyStation")
                        .WithMany()
                        .HasForeignKey("DutyStationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.EntityModels.HR.EmployeePerson", "EmployeePerson")
                        .WithMany()
                        .HasForeignKey("EmployeePersonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.EntityModels.HR.EmployeePossition", "EmployePossition")
                        .WithMany()
                        .HasForeignKey("EmployeePossitionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.EntityModels.HR.ManagerAgreementType", "ManagerAgreementType")
                        .WithMany()
                        .HasForeignKey("ManagerAgreementTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.EntityModels.HR.OrganizationEntity", "OrganizationEntity")
                        .WithMany()
                        .HasForeignKey("OrganizationEntityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.EntityModels.HR.EmployeeMobileNumber", b =>
                {
                    b.HasOne("Models.EntityModels.HR.MobileNumberType", "MobileNumberType")
                        .WithMany()
                        .HasForeignKey("NumberTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.EntityModels.HR.EmployeePerson", b =>
                {
                    b.HasOne("Models.EntityModels.HR.EmployeeMobileNumber", "EmployeeMobileNumber")
                        .WithMany()
                        .HasForeignKey("EmployeeMobileNumberID");

                    b.HasOne("Models.EntityModels.Shared.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
